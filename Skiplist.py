 {
   "cell_type": "code",
   "execution_count": null,
   "id": "378b9108",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Implementing Skip Lists\n",
    "\n",
    "import random\n",
    "\n",
    "# Creating Node Class\n",
    "class Node:\n",
    "    def __init__(self, key):\n",
    "        self.key = key;\n",
    "        self.next = [];\n",
    "        \n",
    "# Initialize Linked List\n",
    "class init_Lst:\n",
    "    def __init__(self):\n",
    "        self.head = None;\n",
    "        \n",
    "def TRAVERSE_LEN(Lst_Head, i):\n",
    "    len = 0;\n",
    "    x = Lst_Head;\n",
    "    while x != None:\n",
    "        len = len + 1;\n",
    "        x = x.next[i];\n",
    "    return len;\n",
    "\n",
    "# OKAY TILL HERE\n",
    "        \n",
    "#Insert an Element\n",
    "def INSERT(A, key):\n",
    "    val_1 = Node(key);\n",
    "    val_1.next.append(None);\n",
    "    if (len(A) == 0):\n",
    "        Lnkd_Lst = init_Lst();\n",
    "        Lnkd_Lst.head = val_1;\n",
    "        A.append(Lnkd_Lst.head);\n",
    "    else:\n",
    "        x = A[0];\n",
    "        y = x;\n",
    "        while (x != None) and (x.key < key):\n",
    "            y = x;\n",
    "            x = x.next[0];\n",
    "        tmp = y.next[0];\n",
    "        y.next[0] = val_1;\n",
    "        val_1.next[0] = tmp;\n",
    "        A = LEVELS(A, val_1);\n",
    "    return A;\n",
    "\n",
    "#Relevel the Skip list\n",
    "def LEVELS(A, node):\n",
    "    cnt = 100;\n",
    "    i = 0;\n",
    "    if len(A) == 1:\n",
    "        while (cnt > 1):\n",
    "            x = A[i];\n",
    "            y = x;\n",
    "            ctr = 0;\n",
    "            cnt = 0;\n",
    "            while x != None:\n",
    "                flag = (random.randint(0, 1));\n",
    "                if flag == 1 and ctr == 0:\n",
    "                    A.append(x);\n",
    "                    ctr = 1;\n",
    "                    y = x;\n",
    "                    cnt = cnt + 1;\n",
    "                elif flag == 1 and ctr == 1:\n",
    "                    y.next.append(x);\n",
    "                    y = x;\n",
    "                    cnt = cnt + 1;\n",
    "                x = x.next[i];\n",
    "            y.next.append(None);\n",
    "            i = i + 1;\n",
    "            \n",
    "    elif len(A) > 1:\n",
    "        ctr = 0;\n",
    "        ctr_prev = 100;\n",
    "        for i in range (1,len(A)):\n",
    "            if ctr_prev > 0:\n",
    "                flag = (random.randint(0, 1))\n",
    "                if flag == 1:\n",
    "                    x = A[i];\n",
    "                    y = x;\n",
    "                    while x != None and x.key < node.key:\n",
    "                        y = x;\n",
    "                        x = x.next[i];\n",
    "                    tmp = y.next[i];\n",
    "                    y.next[i] = node;\n",
    "                    node.next.append(tmp);\n",
    "                    ctr = ctr + 1;\n",
    "                ctr_prev = ctr;\n",
    "                ctr = 0;\n",
    "            \n",
    "        if ctr > 0 and TRAVERSE_LEN(A[len(A) - 1], len(A) - 1) > 1:\n",
    "            x = A[len(A) - 1];\n",
    "            i = len(A) - 1;\n",
    "            ctr = 0;\n",
    "            y = x;\n",
    "            while x != None:\n",
    "                flag = (random.randint(0, 1));\n",
    "                if flag == 1 and ctr == 0:\n",
    "                    A.append(x);\n",
    "                    y = x;\n",
    "                    ctr = 1;\n",
    "                elif flag == 1 and ctr == 1:\n",
    "                    y.next[i+1] = x;\n",
    "                    y = x;\n",
    "                x = x.next[i];\n",
    "            y.next[i+1] = None;\n",
    "    return A;\n",
    "\n",
    "def FIND(Node_head, key):\n",
    "    while Node_head != None:\n",
    "        if Node_head.key == key:\n",
    "            return [Node_head, y];\n",
    "        y = Node_head;\n",
    "        Node_head = Node_head.next[0];        \n",
    "    return 0;\n",
    "\n",
    "def DEL(A, node):\n",
    "    flag = 1;\n",
    "    for i in range (0,len(A)):\n",
    "        if flag != 0:\n",
    "            x = A[i];\n",
    "            y = x;\n",
    "            tmp = x;\n",
    "            flag = 0;\n",
    "            while x != None and flag == 0:\n",
    "                if x != node:\n",
    "                    y = x;\n",
    "                    x = x.next[i];\n",
    "                if x == node:\n",
    "                    flag = 1;\n",
    "                    if y != x:\n",
    "                        y.next[i] = x.next[i];\n",
    "                    else:\n",
    "                        A[i] = x.next[i];\n",
    "\n",
    "    return A;\n",
    "\n",
    "def LOOKUP(A, key):\n",
    "    i = len(A) - 1;\n",
    "    x = A[i];\n",
    "    while i >= 0 and x != None:\n",
    "        if x.key == key:\n",
    "            return [x, x.key];\n",
    "        elif x.key < key:\n",
    "            i = i - 1;\n",
    "            y = x;\n",
    "            x = x.next[i];\n",
    "        else:\n",
    "            i = i - 1;\n",
    "            tmp_find = FIND(A[i], x.key);\n",
    "            if tmp_find != 0:\n",
    "                y_prev = FIND(A[i], x.key)[1];\n",
    "            y = x;\n",
    "            if y_prev.key == key:\n",
    "                return [y_prev, y_prev.key];\n",
    "            else:\n",
    "                x = y_prev;\n",
    "\n",
    "\n",
    "def PRINT(A):\n",
    "    if len (A) > 0:\n",
    "        for i in range(0, len(A)):\n",
    "            x = A[i];\n",
    "            print (\"Level \");\n",
    "            print (i)\n",
    "            while x != None:                \n",
    "                print (\"Element \");\n",
    "                print (x.key);\n",
    "                print (i);\n",
    "                print (x.next);\n",
    "                if len(x.next) >= i: \n",
    "                    x = x.next[i];\n",
    "\n",
    "                \n",
    "#Sending Inputs to Create a skip list\n",
    "A = [];\n",
    "\n",
    "\n",
    "INSERT(A, 1);\n",
    "INSERT(A, 4);\n",
    "INSERT(A, 6);\n",
    "INSERT(A, 3);\n",
    "INSERT(A, 8);\n",
    "PRINT(A);\n",
    "del_node = FIND(A[0], 4)[0];\n",
    "DEL(A, del_node);\n",
    "PRINT(A);\n",
    "print(LOOKUP(A, 1));"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.8"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
