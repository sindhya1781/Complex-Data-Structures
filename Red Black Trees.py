  {
   "cell_type": "code",
   "execution_count": null,
   "id": "c4a39715",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Red Black trees\n",
    "\n",
    "import re\n",
    "import math\n",
    "\n",
    "# Creating Node Class\n",
    "class Node:\n",
    "    def __init__(self, key, p, color):\n",
    "        self.key = key;\n",
    "        self.left = None;\n",
    "        self.right = None;\n",
    "        self.parent = p;\n",
    "        self.color = color;\n",
    "        \n",
    "# Initialize Linked List\n",
    "class init_Lst:\n",
    "    def __init__(self):\n",
    "        self.head = None;\n",
    "\n",
    "#Sort using Inorder Traversal\n",
    "def INORDER_SORT(x):\n",
    "    if x != None:\n",
    "        INORDER_SORT(x.left);\n",
    "        print (x.key);\n",
    "        INORDER_SORT(x.right);\n",
    "\n",
    "#Search\n",
    "def SEARCH(x, key):\n",
    "    if key == int(x.key):\n",
    "        return x;\n",
    "    if x == None:\n",
    "        return 0;\n",
    "    if key < int(x.key):\n",
    "        return SEARCH(x.left, key); \n",
    "    else:\n",
    "        return SEARCH(x.right, key);\n",
    "\n",
    "#Minimum\n",
    "def MINIMUM(x):\n",
    "    while x.left != None:\n",
    "        x = x.left;\n",
    "    return x.key;\n",
    "\n",
    "#Maximum\n",
    "def MAXIMUM(x):\n",
    "    while x.right != None:\n",
    "        x = x.right;\n",
    "    return x.key;\n",
    "\n",
    "#Predecessor\n",
    "def PREDECESSOR(x):\n",
    "    if x.left != None:\n",
    "        return MAXIMUM(x.left);\n",
    "    else:\n",
    "        y = x.parent;\n",
    "        while y != None and x == y.left:\n",
    "            x = y;\n",
    "            y = y.parent;\n",
    "    return y.key;\n",
    "\n",
    "#Successor\n",
    "def SUCCESSOR(x):\n",
    "    if x.right != None:\n",
    "        return MINIMUM(x.right);\n",
    "    else:\n",
    "        y = x.parent;\n",
    "        while y != None and x == y.right:\n",
    "            x = y;\n",
    "            y = y.parent;\n",
    "    return y.key;\n",
    "\n",
    "#Left Rotate\n",
    "def LEFT_ROTATE(T, x):\n",
    "    y = x.right;\n",
    "    x.right = y.left;\n",
    "    if y.left != None:\n",
    "        y.left.parent = x;\n",
    "    y.parent = x.parent;\n",
    "    if x.parent == None:\n",
    "        T.head = y;\n",
    "    elif x == x.parent.left:\n",
    "        x.parent.left = y;\n",
    "    else:\n",
    "        x.parent.right = y;\n",
    "    y.left = x;\n",
    "    x.parent = y;\n",
    "    return T;\n",
    "\n",
    "#Right Rotate\n",
    "def RIGHT_ROTATE(T, y):\n",
    "    x = y.left;\n",
    "    y.left = x.right;\n",
    "    if x.right != None:\n",
    "        x.right.parent = y;\n",
    "    x.parent = y.parent;\n",
    "    if y.parent == None:\n",
    "        T.head = y;\n",
    "    elif y == y.parent.left:\n",
    "        y.parent.left = x;\n",
    "    else:\n",
    "        y.parent.right = x;\n",
    "    x.left = y;\n",
    "    y.parent = x;\n",
    "    return T;\n",
    "\n",
    "#Insert\n",
    "def INSERT(T, val):\n",
    "    z = Node(val, None, \"R\");\n",
    "    y = None;\n",
    "    x = T.head;\n",
    "    while x != None:\n",
    "        y = x;\n",
    "        if int(z.key) < int(x.key):\n",
    "            x = x.left;\n",
    "        else:\n",
    "            x = x.right;\n",
    "    z.parent = y;\n",
    "    if y == None:\n",
    "        T.head = z;\n",
    "    elif int(z.key) < int(y.key):\n",
    "        y.left = z;\n",
    "    else: \n",
    "        y.right = z;\n",
    "    T = INSERT_FIXUP(T, z);\n",
    "    return T;\n",
    "    \n",
    "def INSERT_FIXUP(T, z):\n",
    "    if z != T.head and z.parent.parent != None:\n",
    "        while z.parent != None and z.parent.color == \"R\" and z.parent.parent != None:\n",
    "            if z.parent == z.parent.parent.left:\n",
    "                y = z.parent.parent.right;\n",
    "                if y != None and y.color == \"R\":\n",
    "                    z.parent.color = \"B\";\n",
    "                    y.color = \"B\";\n",
    "                    z.parent.parent.color = \"R\";\n",
    "                    z = z.parent.parent;\n",
    "                elif z == z.parent.right:\n",
    "                    z = z.parent;\n",
    "                    T = LEFT_ROTATE(T, z);\n",
    "                    z.parent.color = \"B\";\n",
    "                    z.parent.parent.color = \"R\";\n",
    "                    T = RIGHT_ROTATE(T, z.parent.parent);\n",
    "            else:\n",
    "                y = z.parent.parent.left;\n",
    "                if y != None and y.color == \"R\":\n",
    "                    z.parent.color = \"B\";\n",
    "                    y.color = \"B\";\n",
    "                    z.parent.parent.color = \"R\";\n",
    "                    z = z.parent.parent;\n",
    "                elif z == z.parent.left:\n",
    "                    z = z.parent;\n",
    "                    T = LEFT_ROTATE(T, z);\n",
    "                    z.parent.color = \"B\";\n",
    "                    z.parent.parent.color = \"R\";\n",
    "                    T = RIGHT_ROTATE(T, z.parent.parent);\n",
    "    T.head.color = \"B\";\n",
    "    return T;\n",
    "    \n",
    "\n",
    "#Taking the input and running it through the code\n",
    "A = [];\n",
    "\n",
    "inp = open('Numbers.txt','r');\n",
    "Num_Val = inp.readlines();\n",
    "inp.close();\n",
    "A = Num_Val[0].split(\",\");\n",
    "\n",
    "T = init_Lst();\n",
    "ele = 0;\n",
    "for i in A:\n",
    "    T = INSERT(T, i);\n",
    "    ele = ele + 1;\n",
    "\n",
    "exit = 0;\n",
    "while (exit == 0):\n",
    "    print (\"Enter command to be run - \\n\");\n",
    "    print (\"1. Insert an Element - insert x \\n\");\n",
    "    print (\"2. Sort - sort \\n\");\n",
    "    print (\"3. Search for an Element - search x \\n\");\n",
    "    print (\"4. Exit - exit \\n\");\n",
    "    print (\"5. Minimum - min \\n\")\n",
    "    print (\"6. Maximum - max \\n\");\n",
    "    print (\"7. Predecessor - pred x\");\n",
    "    print (\"8. Successor - succ x\");\n",
    "    c_in = input();\n",
    "    \n",
    "    if c_in == \"exit\":\n",
    "        exit = 1;\n",
    "    elif c_in == \"sort\":\n",
    "        INORDER_SORT(T.head);\n",
    "    elif c_in == \"min\":\n",
    "        print(MINIMUM(T.head));\n",
    "    elif c_in == \"max\":\n",
    "        print(MAXIMUM(T.head));\n",
    "    elif re.compile(\"insert\").search(c_in):\n",
    "        c_in_val = int(c_in.split(\" \")[1]);\n",
    "        INSERT (T, c_in_val);\n",
    "        ele = ele + 1;\n",
    "    elif re.compile(\"search\").search(c_in):\n",
    "        print (SEARCH (T.head, int(c_in.split(\" \")[1])));\n",
    "    elif re.compile(\"pred\").search(c_in):\n",
    "        print(PREDECESSOR (SEARCH(T.head, int(c_in.split(\" \")[1]))));\n",
    "    elif re.compile(\"succ\").search(c_in):\n",
    "        print(SUCCESSOR (SEARCH(T.head, int(c_in.split(\" \")[1]))));\n",
    "    else:\n",
    "        print (\"Incorrect Input. Please Try Again\");\n",
    "    print (\"Height of Tree is bounded by - \\n\");\n",
    "    print (math.floor(math.log(ele)));"
   ]
  }